// Задание 1
// • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

// • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

const albums = [
    {
    title: "Название альбома1",
    artist: "Исполнитель1",
    year: "Год выпуска1"
    },
    {
    title: "Название альбома2",
    artist: "Исполнитель2",
    year: "Год выпуска2"
    },
    {
    title: "Название альбома3",
    artist: "Исполнитель3",
    year: "Год выпуска3"
    }
]

const musicCollection = {
    albums: [...albums],
    [Symbol.iterator]: function() {
        let index = 0;
        return {
            next: () => {
                if (index < this.albums.length) {
                    return {value: this.albums[index++], done: false}
                } else return {done: true};
            }
        }
    }
}


for (const album of musicCollection) {
    console.log(album.title + ' - ' + album.artist + ' (' +album.year + ')');
}


// • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)


// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

// Необходимо создать систему управления этими заказами, которая позволит:

// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

// Повара и их специализации:
// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.

// Блюда и их повара:

// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

// Заказы:

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.

let victor = {"Виктор-специализация": "Пицца"};
let olga = {"Ольга - специализация": "Суши"};
let dim = {"Дмитрий - специализация": "Десерты"};

let chef = new Map();
chef.set("Маргарита", victor)
    .set("Пепперони", victor)
    .set("Филадельфия", olga)
    .set("Калифорния", olga)
    .set("Тирамису", dim)
    .set("Чизкейк", dim);


let alex = {name: "Алексей"};
let mari = {name: "Мария"};
let irina = {name: "Ирина"};

let orders = new Map();
orders.set(alex, ["Пепперони", "Тирамису"])
    .set(mari, ["Калифорния", "Маргарита"])
    .set(irina, ["Чизкейк"]);

orders.forEach(function(value, key) {
    let output =  `Клиент ${key.name} заказал: `;
    value.forEach(function(dish, index) {
        output += !index ? "" : " и ";
        output += `${dish}`;
    });
    
    console.log(output);
});


// console.log(`Клиент ${mari.name} заказал: ${orders.get(mari)[0]} и ${orders.get(mari)[1]}`);
// console.log(`Клиент ${mari.name} заказала: ${orders.get(irina)}`);
